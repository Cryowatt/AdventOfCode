use advent::*;

advent_day!(Day23, parse, Vec<Vec<Tile>>, part1, part2);

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
enum Tile {
    Start,
    Path,
    Forest,
    North,
    East,
    West,
    South,
}

pub fn parse(input: &str) -> Vec<Vec<Tile>> {
    todo!()
}

/// ```rust
/// use advent_of_code_2023::day23::*;
/// let input = parse(
/// r"#.#####################
///##.......#########...###
///########.#########.#.###
///####.....#.>.>.###.#.###
///####v#####.#v#.###.#.###
///####.>...#.#.#.....#...#
///####v###.#.#.#########.#
///####...#.#.#.......#...#
///######.#.#.#######.#.###
///##.....#.#.#.......#...#
///##.#####.#.#.#########v#
///##.#...#...#...###...>.#
///##.#.#v#######v###.###v#
///##...#.>.#...>.>.#.###.#
///######v#.#.###v#.#.###.#
///##.....#...#...#.#.#...#
///##.#########.###.#.#.###
///##...###...#...#...#.###
///####.###.#.###v#####v###
///##...#...#.#.>.>.#.>.###
///##.###.###.#.###.#.#v###
///##.....###...###...#...#
///######################.#");
/// assert_eq!(5, part1(&input));
/// ```
pub fn part1(map: &Vec<Vec<Tile>>) -> u64 {
    todo!()
}

/// ```rust
/// use advent_of_code_2023::day23::*;
/// let input = parse(
/// r"#.#####################
///##.......#########...###
///########.#########.#.###
///####.....#.>.>.###.#.###
///####v#####.#v#.###.#.###
///####.>...#.#.#.....#...#
///####v###.#.#.#########.#
///####...#.#.#.......#...#
///######.#.#.#######.#.###
///##.....#.#.#.......#...#
///##.#####.#.#.#########v#
///##.#...#...#...###...>.#
///##.#.#v#######v###.###v#
///##...#.>.#...>.>.#.###.#
///######v#.#.###v#.#.###.#
///##.....#...#...#.#.#...#
///##.#########.###.#.#.###
///##...###...#...#...#.###
///####.###.#.###v#####v###
///##...#...#.#.>.>.#.>.###
///##.###.###.#.###.#.#v###
///##.....###...###...#...#
///######################.#");
/// //assert_eq!(?, part2(&input));
/// ```
pub fn part2(map: &Vec<Vec<Tile>>) -> u64 {
    todo!()
}
